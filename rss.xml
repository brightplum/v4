<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xml:base="https://brightplum.com/">
  <channel>
    <title>brightplum-v4</title>
    <link>https://brightplum.com/</link>
    <description/>
    <language>en</language>
    
    <item>
  <title>From Despair to Delight: How We Rescued a Non-Profit's Digital Presence</title>
  <link>https://brightplum.com/blog/despair-delight-how-we-rescued-non-profits-digital-presence</link>
  <description><![CDATA[<span>From Despair to Delight: How We Rescued a Non-Profit's Digital Presence</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Mon, 03/03/2025 - 11:15
</span>

            <h3><strong>The Breaking Point: A Website Manager on the Edge</strong></h3><p dir="ltr">When we first met Sarah, the website manager for a community-focused non-profit, we could see the exhaustion in her eyes. "I've been thinking about quitting," she confided during our initial consultation. The organization's previous web development vendor had left their digital infrastructure in shambles—auto-renewals failing, the e-commerce system breaking down regularly, and a receipt system that created more problems than it solved. For an organization dependent on memberships and online purchases, this wasn't just inconvenient; it was threatening their mission. Sarah spent more time troubleshooting technical issues than fulfilling her actual responsibilities, and the constant stress had pushed her to her breaking point.</p><h3><strong>Leading with Empathy: Understanding Before Acting</strong></h3><p dir="ltr">Understanding Sarah's frustration, our team took the time to listen before rushing to solutions. We scheduled extended discovery sessions to fully comprehend the technical challenges and their human impact. "No one has ever asked me how these problems affect our day-to-day operations," Sarah remarked, visibly relieved to be heard. After developing a comprehensive understanding of both the technical requirements and the emotional toll, we crafted a phased recovery plan that addressed immediate pain points while building toward long-term stability. We established weekly check-ins and created a dedicated communication channel where Sarah could reach us with urgent concerns.</p><h3><strong>Executing the Recovery: A Strategic Process</strong></h3><p dir="ltr">With empathy guiding our approach, we methodically rebuilt the fractured systems. We prioritized restoring the auto-renewal functionality to stabilize membership management, then reconstructed the purchasing system with proper member/non-member pricing validation, and implemented a robust receipt system to maintain financial accuracy. Throughout the process, we maintained transparent communication about progress, challenges, and timelines. Each milestone achievement was celebrated with Sarah and her team, gradually restoring their confidence in the platform. Beyond fixing what was broken, we enhanced the user experience with interactive maps, advanced location filters, and streamlined administrative tools—transformations that directly addressed needs Sarah had mentioned but never expected would be addressed.</p><h3><strong>The Transformation: From Crisis to Confidence</strong></h3><p dir="ltr">Today, Sarah describes the website as "the best it's ever been" and has found renewed enthusiasm for her role. The transformation wasn't just technical—it revitalized the entire organization's ability to serve its mission effectively. Staff members who previously dreaded website-related tasks now leverage the platform as a powerful tool for community engagement. Through continued monitoring, maintenance, and responsive support, we've maintained this positive trajectory, allowing the organization to focus on impact rather than infrastructure.</p><h3><strong>Our Client Support Process: Communication That Makes a Difference</strong></h3><ul><li dir="ltr"><strong>Dedicated Project Manager</strong> - A single point of contact who understands both technical details and organizational needs.</li><li dir="ltr"><strong>Weekly Status Updates</strong> - Regular, scheduled communication that keeps everyone informed without overwhelming the client.</li><li dir="ltr"><strong>Emergency Response Protocol</strong> - Clear escalation paths for urgent issues with guaranteed response times.</li><li dir="ltr"><strong>Jargon-Free Explanations</strong> - Technical concepts translated into accessible language that empowers rather than confuses.</li><li dir="ltr"><strong>Proactive Monitoring</strong> - Identifying and addressing potential issues before they impact the client.</li><li dir="ltr"><strong>Celebration of Milestones</strong> - Acknowledging progress to build confidence and maintain momentum.</li><li dir="ltr"><strong>Training and Knowledge Transfer</strong> - Empowering the client team to handle routine tasks with confidence.</li></ul><p><strong>Regular Strategy Sessions</strong> - Looking beyond immediate fixes to align technical capabilities with organizational goals.</p><h3><strong>Ready to Transform Your Digital Experience?</strong></h3><p dir="ltr">Is your organization struggling with a dysfunctional website that's causing stress for your team? You don't have to continue suffering through technical challenges that prevent you from fulfilling your mission. Our team specializes in turning digital disasters into streamlined systems that support your work rather than hinder it.</p><p><strong>Contact us today for a no-obligation consultation.</strong> We'll listen to your challenges, understand your needs, and develop a customized plan to revitalize your digital presence. Let's work together to create a website that works as hard as you do.</p><p><a class="button-purple" href="https://calendar.app.google/B8TK7pwMF3XJzU6j6">Schedule your consultation</a></p>
      
      
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
          
  ]]></description>
  <pubDate>Mon, 03 Mar 2025 17:15:46 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">27 at https://brightplum.com</guid>
    </item>
<item>
  <title>Web Accessibility: More Than Just Checking Boxes</title>
  <link>https://brightplum.com/blog/web-accessibility-more-just-checking-boxes</link>
  <description><![CDATA[<span>Web Accessibility: More Than Just Checking Boxes</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 02/18/2025 - 13:53
</span>

            <h3><strong>The Urgent Call</strong></h3><p dir="ltr">The call came on a Tuesday morning - one of our long-standing clients was in a panic. "We just received a legal notice," their marketing director explained, voice tight with stress. "We're being sued for lack of accessibility on our website." Unfortunately, this scenario has become increasingly common as web accessibility standards are more strictly enforced. What had seemed like a "nice-to-have" suddenly became an urgent legal matter with potential financial and reputational consequences.</p><h3><strong>Understanding the Stakes</strong></h3><p dir="ltr">At Bright Plum, we immediately assembled our accessibility team and scheduled an emergency meeting with the client. The stakes were clear: their website needed to be accessible to all users, regardless of ability, not just to comply with legal requirements but because inclusive design is simply the right approach. Their situation highlighted a critical reality many businesses overlook - web accessibility isn't optional anymore, and retrofitting can be more costly and stressful than building it in from the start.</p><h3><strong>Comprehensive Testing &amp; Analysis</strong></h3><p dir="ltr">Our first step was comprehensive testing. We knew that relying on a single tool would be insufficient, as each has limitations. We employed five distinct testing tools to ensure complete coverage, meticulously documenting every potential issue. One crucial discovery was the prevalence of false positives - instances where automated tools flagged items that weren't actual accessibility violations. For example, some tools incorrectly flagged decorative images properly marked in the code. Human expertise proved essential in distinguishing genuine issues from false alarms.</p><h3><strong>Implementation &amp; Verification</strong></h3><p dir="ltr">With a clear understanding of the legitimate problems, we implemented necessary fixes and pushed them live. But we didn't stop there - we ran all audits again to verify our solutions worked as intended without introducing new issues. For complete transparency, we compiled a comprehensive report detailing every testing tool used, all flagged items, documentation of our fixes, and examples of false positives with supporting code. Most importantly, we implemented monthly compliance checks against WCAG 2.1 AA standards, recognizing that accessibility isn't a one-time fix but an ongoing commitment.</p><h3><strong>Beyond Compliance: The Real Victory</strong></h3><p dir="ltr">The real victory wasn't just avoiding legal consequences - it was creating a more inclusive website that better served all users. Our client saw immediate benefits: increased engagement from users with disabilities, improved SEO performance, and enhanced user experience across all demographics. This experience transformed their perspective on accessibility from a compliance burden to a business advantage. Today, they're advocates for proactive accessibility measures, understanding that creating inclusive digital spaces isn't just about avoiding lawsuits - it's about embracing and serving their entire audience while protecting their business.</p><p dir="ltr"><a class="button-purple" href="https://calendar.app.google/B8TK7pwMF3XJzU6j6" target="_blank">Need help with web accessibility? Contact Bright Plum for a comprehensive accessibility audit and ongoing compliance monitoring.</a></p>
      
      
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
              <a href="https://brightplum.com/taxonomy/term/7" hreflang="en">Accessibility</a>
              <a href="https://brightplum.com/taxonomy/term/6" hreflang="en">Web Accessibility</a>
          
  ]]></description>
  <pubDate>Tue, 18 Feb 2025 19:53:15 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">26 at https://brightplum.com</guid>
    </item>
<item>
  <title>Setting up Kernel Testing in Drupal</title>
  <link>https://brightplum.com/blog/setting-kernel-testing-drupal</link>
  <description><![CDATA[<span>Setting up Kernel Testing in Drupal</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Wed, 01/08/2025 - 11:22
</span>

            <h4><strong>Introduction</strong></h4><p><strong>Kernel tests</strong> in Drupal are crucial for ensuring the integrity and functionality of custom modules and their interaction with core subsystems. These tests validate integration between system components within a reduced Drupal environment, offering deeper coverage than unit tests without the complexity of full functional tests.</p><blockquote><p><strong>Note:</strong>&nbsp;<br>You can also test services, controllers, specific functions of a service, among a lot of things, I clarify this because my original thought was that the original logic needed to be replicated in the test, and really the purpose is to be able to directly use the service, controller, function directly to test it in the kernel test. I have also noticed that hooks and event subscriber are really difficult to test, so I will investigate this and see if I am doing it wrong and if so, I will modify or do something detailed for those tests.</p></blockquote><p>This document provides a detailed guide to setting up and running Kernel tests in Drupal using <strong>DDEV</strong>. We'll delve into technical concepts and provide practical examples to illustrate their importance and application in Drupal project development.</p><hr><h4 class="ql-heading" data-block-id="block-b2b79708-eec7-406f-9c72-6e5804b65e55"><strong>Steps to Configure Kernel Tests</strong></h4><h4>1. Verify PHPUnit Installation</h4><p>Before starting, it's essential to ensure that <strong>PHPUnit</strong> is installed in your development environment.</p><pre><code class="language-plaintext">vendor/bin/phpunit --version</code></pre><p>If the above command doesn't display the PHPUnit version, it means it's not installed. You can add it as a development dependency using Composer:</p><pre><code class="language-plaintext">composer require --dev phpunit/phpunit</code></pre><p>After installation, verify again:</p><pre><code class="language-plaintext">vendor/bin/phpunit --version</code></pre><h4>2. Configure the phpunit.xml File</h4><p>Copy the PHPUnit configuration file provided by Drupal to your project's root:</p><pre><code class="language-plaintext">cp web/core/phpunit.xml.dist phpunit.xml</code></pre><p>This file is essential for customizing test configurations according to your project's specific needs.</p><p><strong>Contents of </strong><code><strong>phpunit.xml</strong></code><strong>:</strong></p><pre><code class="language-plaintext">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- For how to customize PHPUnit configuration, see core/tests/README.md. --&gt;
&lt;phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         bootstrap="docroot/core/tests/bootstrap.php" colors="true"
         beStrictAboutTestsThatDoNotTestAnything="true"
         beStrictAboutOutputDuringTests="true"
         beStrictAboutChangesToGlobalState="true"
         failOnWarning="true"
         printerClass="\Drupal\Tests\Listeners\HtmlOutputPrinter"
         cacheResult="false"
         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.3/phpunit.xsd"&gt;
  &lt;php&gt;
    &lt;!-- PHP Settings --&gt;
    &lt;ini name="error_reporting" value="32767"/&gt;
    &lt;ini name="memory_limit" value="-1"/&gt;
    &lt;!-- Base URL for the site under test --&gt;
    &lt;env name="SIMPLETEST_BASE_URL" value="https://[your_project].ddev.site"/&gt;
    &lt;!-- Database connection string --&gt;
    &lt;env name="SIMPLETEST_DB" value="mysql://db:db@db/db"/&gt;
    &lt;!-- Output directory for browser tests --&gt;
    &lt;env name="BROWSERTEST_OUTPUT_DIRECTORY" value="./docroot/sites/simpletest/browser_output"/&gt;
    &lt;!-- Optional additional configurations --&gt;
    &lt;!-- &lt;env name="SYMFONY_DEPRECATIONS_HELPER" value="disabled"/&gt; --&gt;
    &lt;!-- &lt;env name="MINK_DRIVER_CLASS" value=""/&gt; --&gt;
    &lt;!-- &lt;env name="MINK_DRIVER_ARGS" value=""/&gt; --&gt;
    &lt;!-- &lt;env name="MINK_DRIVER_ARGS_WEBDRIVER" value=""/&gt; --&gt;
  &lt;/php&gt;
  &lt;testsuites&gt;
    &lt;testsuite name="unit"&gt;
      &lt;!-- Paths to unit tests for custom modules --&gt;
      &lt;directory&gt;./docroot/modules/custom/*/tests/src/Unit&lt;/directory&gt;
      &lt;directory&gt;./docroot/modules/custom/*/modules/*/tests/src/Unit&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;testsuite name="kernel"&gt;
      &lt;!-- Paths to Kernel tests for custom modules --&gt;
      &lt;directory&gt;./docroot/modules/custom/*/tests/src/Kernel&lt;/directory&gt;
      &lt;directory&gt;./docroot/modules/custom/*/modules/*/tests/src/Kernel&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;testsuite name="functional"&gt;
      &lt;!-- Paths to functional tests for custom modules --&gt;
      &lt;directory&gt;./docroot/modules/custom/*/tests/src/Functional&lt;/directory&gt;
      &lt;directory&gt;./docroot/modules/custom/*/modules/*/tests/src/Functional&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;testsuite name="functional-javascript"&gt;
      &lt;!-- Paths to functional JavaScript tests for custom modules --&gt;
      &lt;directory&gt;./docroot/modules/custom/*/tests/src/FunctionalJavascript&lt;/directory&gt;
      &lt;directory&gt;./docroot/modules/custom/*/modules/*/tests/src/FunctionalJavascript&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;!-- You can uncomment the following test suite if needed --&gt;
    &lt;!-- &lt;testsuite name="build"&gt;
         &lt;file&gt;./tests/TestSuites/BuildTestSuite.php&lt;/file&gt;
    &lt;/testsuite&gt; --&gt;
  &lt;/testsuites&gt;
  &lt;listeners&gt;
    &lt;!-- Drupal listener for additional testing hooks --&gt;
    &lt;listener class="\Drupal\Tests\Listeners\DrupalListener"&gt;&lt;/listener&gt;
  &lt;/listeners&gt;
  &lt;!-- Settings for coverage reports --&gt;
  &lt;coverage&gt;
    &lt;include&gt;
      &lt;!-- Directories to include --&gt;
      &lt;directory&gt;./includes&lt;/directory&gt;
      &lt;directory&gt;./lib&lt;/directory&gt;
      &lt;directory&gt;./modules&lt;/directory&gt;
      &lt;directory&gt;../modules&lt;/directory&gt;
      &lt;directory&gt;../sites&lt;/directory&gt;
    &lt;/include&gt;
    &lt;exclude&gt;
      &lt;!-- Directories to exclude --&gt;
      &lt;directory&gt;./modules/*/src/Tests&lt;/directory&gt;
      &lt;directory&gt;./modules/*/tests&lt;/directory&gt;
      &lt;directory&gt;../modules/*/src/Tests&lt;/directory&gt;
      &lt;directory&gt;../modules/*/tests&lt;/directory&gt;
      &lt;directory&gt;../modules/*/*/src/Tests&lt;/directory&gt;
      &lt;directory&gt;../modules/*/*/tests&lt;/directory&gt;
      &lt;!-- Exclude .api.php files from coverage --&gt;
      &lt;directory suffix=".api.php"&gt;./lib/**&lt;/directory&gt;
      &lt;directory suffix=".api.php"&gt;./modules/**&lt;/directory&gt;
      &lt;directory suffix=".api.php"&gt;../modules/**&lt;/directory&gt;
    &lt;/exclude&gt;
  &lt;/coverage&gt;
&lt;/phpunit&gt;</code></pre><h4>Important Notes:</h4><ul><li><strong>SIMPLETEST_BASE_URL</strong>: Replace <code>[your_project]</code> with your actual project's name in DDEV.</li><li><strong>SIMPLETEST_DB</strong>: Ensure the connection string reflects the correct credentials and host in your DDEV environment. (Can you use <code>ddev status</code> for see data about connection db)*</li><li><strong>Directory</strong>: You may need to change the directory to a valid one, in this case use <code>docroot</code>, but you could use <code>web </code>or something else.</li></ul><h4 class="ql-heading" data-block-id="block-4edac493-9f12-4470-a8d4-f0453f2d9460">Understanding Kernel Tests in Drupal</h4><h4>What Are Kernel Tests in Drupal?</h4><p><strong>Kernel tests</strong> are a mid-level automated testing approach that validates the integration between different system components within a reduced Drupal environment. These tests run using a lightweight Drupal bootstrap, allowing you to test interactions with core subsystems like the database and configuration system without loading the full presentation layer or a browser.</p><p>They are based on the <code>KernelTestBase</code> class, which provides access to a minimal Drupal environment, enabling the testing of integration scenarios that go beyond unit tests but without the complexity of full functional tests.</p><h4>Why Are Kernel Tests Important?</h4><ul><li><strong>Integration Validation</strong>: They ensure that custom components (entities, services, plugins, etc.) work correctly with Drupal's APIs and subsystems.</li><li><strong>Efficiency</strong>: Kernel tests are faster than full functional tests since they don't require a web server or browser.</li><li><strong>Intermediate Coverage</strong>: They provide deeper coverage than unit tests but are simpler to set up and run compared to functional or functional JavaScript tests.</li><li><strong>Early Detection of Integration Issues</strong>: They help identify integration bugs between custom code and Drupal subsystems before they reach production.</li><li><strong>Controlled Environment</strong>: They offer a consistent and controlled setup for testing subsystems like entity storage, custom queries, or event subscribers.</li></ul><hr><h4 class="ql-heading" data-block-id="block-785059df-f194-4d55-8460-6611d2a98af6">Common Use Cases for Kernel Tests in Drupal</h4><h4>1. CRUD Operations on Custom Entities</h4><p><strong>What to Test:</strong></p><ul><li>Create, load, update, and delete entities.</li><li>Ensure custom fields are saved and retrieved correctly.</li></ul><strong>Example:</strong><pre><code class="language-plaintext">public function testEntityCrudOperations() {
    $entity = \Drupal::entityTypeManager()
      -&gt;getStorage('custom_entity')
      -&gt;create(['field_custom' =&gt; 'value']);
    $entity-&gt;save();
    $loaded_entity = \Drupal::entityTypeManager()
      -&gt;getStorage('custom_entity')
      -&gt;load($entity-&gt;id());
    $this-&gt;assertEquals('value', $loaded_entity-&gt;get('field_custom')-&gt;value);
}</code></pre><h4>2. Custom Form Validation</h4><p><strong>What to Test:</strong></p><ul><li>Validate the behavior of custom forms built with the <strong>Form API</strong>.</li><li>Test restrictions on required fields or data formats.</li></ul><strong>Example:</strong><pre><code class="language-plaintext">use Drupal\Core\Form\FormState;
public function testCustomFormValidation() {
    $form = \Drupal::formBuilder()-&gt;getForm('Drupal\custom_module\Form\CustomForm');
    $form_state = new FormState();
    $form_state-&gt;setValues(['field_name' =&gt; 'Invalid Value']);
    
    // Execute validations$form['#validate'][0]($form, $form_state);
    $this-&gt;assertTrue($form_state-&gt;hasAnyErrors(), 'Validation failed as expected');
}</code></pre><h4>3. Custom Services</h4><p><strong>What to Test:</strong></p><ul><li>Ensure the service returns the correct values.</li><li>Validate that the service handles configurations or dependencies properly.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">public function testCustomService() {
    $service = \Drupal::service('custom_module.some_service');
    $result = $service-&gt;processData(['input' =&gt; 'test']);
    $this-&gt;assertEquals('expected_output', $result);
}</code></pre><h4>4. Event Subscribers</h4><p><strong>What to Test:</strong></p><ul><li>Ensure the subscriber reacts correctly to specific events, such as <code>hook_entity_insert</code>.</li></ul><p><strong>Example:</strong></p><pre>public function testEntityInsertSubscriber() {
    $entity = \Drupal::entityTypeManager()
      -&gt;getStorage('node')
      -&gt;create(['type' =&gt; 'article', 'title' =&gt; 'Test']);
    $entity-&gt;save();
    // Verify that the subscriber modified the entity as expected.
    $this-&gt;assertEquals('Modified Title', $entity-&gt;getTitle());
}</pre><h4>5. Custom Queries</h4><p><strong>What to Test:</strong></p><ul><li>Validate that custom queries return correct results based on filters and conditions.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">public function testCustomQuery() {
    $query = \Drupal::entityQuery('custom_entity')
      -&gt;condition('field_status', 'active');
    $result = $query-&gt;execute();
    $this-&gt;assertNotEmpty($result, 'Query returned active entities');
}</code></pre><h4>6. Cache API</h4><p><strong>What to Test:</strong></p><ul><li>Verify that data is properly stored and retrieved from the cache.</li><li>Ensure data is invalidated under the correct conditions.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">use Drupal\Core\Cache\CacheBackendInterface;

public function testCacheStorage() {
    $cache = \Drupal::cache('custom_cache');
    $cache-&gt;set('cache_key', 'cache_value', CacheBackendInterface::CACHE_PERMANENT);

    $cached_data = $cache-&gt;get('cache_key');
    $this-&gt;assertEquals('cache_value', $cached_data-&gt;data);
}</code></pre><h4>7. Typed Data API</h4><p><strong>What to Test:</strong></p><ul><li>Test validation and serialization of complex structured data.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">public function testTypedDataValidation() {
    $data = \Drupal::typedDataManager()-&gt;create('string');
    $data-&gt;setValue('Test String');
    $violations = $data-&gt;validate();
    $this-&gt;assertTrue($violations-&gt;count() === 0, 'Validation passed for valid data');
}</code></pre><h4>8. Custom Rules</h4><p><strong>What to Test:</strong></p><ul><li>Ensure that conditions and actions of a custom rule work as expected.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">public function testCustomRule() {
    $rule = \Drupal::service('rules')-&gt;load('custom_rule');
    $result = $rule-&gt;evaluate(['entity' =&gt; $entity]);
    $this-&gt;assertTrue($result, 'Rule evaluated correctly');
}</code></pre><h4>9. Migration test (No testing yet)</h4><p><strong>What to Test:</strong></p><ul><li>The idea is to test a migration and make it work.</li></ul><p><strong>Example:</strong></p><pre><code class="language-plaintext">  /**
   * Tests the migration process.
   */
  public function testMigration() {
    // Load the migration.
    $migrationPluginManager = \Drupal::service('plugin.manager.migration');
    $migration = $migrationPluginManager-&gt;createInstance('custom_migration_id');

    // Execute the migration.
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    $result = $executable-&gt;import();

    // Verify results.
    $this-&gt;assertEquals(MigrateExecutable::RESULT_COMPLETED, $result, 'Migration completed successfully.');
    $this-&gt;assertCount(5, \Drupal::entityTypeManager()-&gt;getStorage('node')-&gt;loadMultiple(), 'Correct number of nodes migrated.');
  }</code></pre><h3 class="ql-heading" data-block-id="block-79acfcfb-7dc4-47b6-9eb6-c126f7267eb8">How to perform a kernel test:</h3><h4 class="ql-heading" data-block-id="block-b57669e5-aa90-4801-9b29-cc4730b439a0">Step 1: Create a Simple Custom Module</h4><p>Create a custom module named <code>example_module</code>.</p><p><strong>File Structure:</strong></p><pre><code class="language-plaintext">modules/
└── custom/
    └── example_module/
        ├── example_module.info.yml
        └── example_module.services.yml</code></pre><p><strong>Content of </strong><code><strong>example_module.info.yml</strong></code><strong>:</strong></p><pre><code class="language-plaintext">name: Example Module
type: module
description: 'A simple example module for testing purposes.'
package: Custom
core_version_requirement: ^10</code></pre><h4 class="ql-heading" data-block-id="block-c79e8f01-1d5c-42c2-bc03-99181b23fba4">Step 2: Create the Kernel Test</h4><p>Create the directory for tests and the test file:</p><pre><code class="language-plaintext">modules/
└── custom/
    └── example_module/
        ├── tests/
        │   └── src/
        │       └── Kernel/
        │           └── ExampleModuleKernelTest.php
        ├── example_module.info.yml
        └── example_module.services.yml</code></pre><p><strong>Content of </strong><code><strong>ExampleModuleKernelTest.php</strong></code><strong>:</strong></p><pre><code class="language-plaintext">&lt;?php

namespace Drupal\Tests\example_module\Kernel;

use Drupal\KernelTests\KernelTestBase;

/**
 * Tests for the Example Module.
 *
 * @group example_module
 */
class ExampleModuleKernelTest extends KernelTestBase {

  /**
   * Modules to enable.
   *
   * @var array
   */
  protected static $modules = [
    'system',
    'user',
    'example_module',
  ];

  /**
   * Test that the module is enabled.
   */
  public function testModuleIsEnabled() {
    $this-&gt;assertTrue(\Drupal::moduleHandler()-&gt;moduleExists('example_module'), 'Example Module is enabled.');
  }

  /**
   * Test creating a user entity.
   */
  public function testCreateUser() {
    // Create a user entity.
    $user = $this-&gt;container-&gt;get('entity_type.manager')
      -&gt;getStorage('user')
      -&gt;create([
        'name' =&gt; 'test_user',
        'mail' =&gt; 'test_user@example.com',
        'status' =&gt; 1,
      ]);
    $user-&gt;save();

    // Load the user entity.
    $loaded_user = $this-&gt;container-&gt;get('entity_type.manager')
      -&gt;getStorage('user')
      -&gt;load($user-&gt;id());

    // Assert that the user was created successfully.
    $this-&gt;assertEquals('test_user', $loaded_user-&gt;getAccountName(), 'User account name matches.');
    $this-&gt;assertEquals('test_user@example.com', $loaded_user-&gt;getEmail(), 'User email matches.');
  }

}</code></pre><h4 class="ql-heading" data-block-id="block-5d2b9f7d-258f-4eac-9a5c-de77af06dfc0">Step 3: Run the Test</h4><p>From your project's root directory, run:</p><pre><code class="language-plaintext">ddev ssh and run that next command:
vendor/bin/phpunit modules/custom/example_module/tests/src/Kernel/ExampleModuleKernelTest.php --verbose</code></pre><h4 class="ql-heading" data-block-id="block-8e61b468-748e-456d-a954-9b60f281330d">Code Explanation</h4><ul><li><strong>Namespace</strong>: <code>Drupal\Tests\example_module\Kernel</code> defines the namespace for your module's tests.</li><li><strong>Class </strong><code><strong>ExampleModuleKernelTest</strong></code>: Extends <code>KernelTestBase</code>, providing the necessary environment for Kernel tests.</li><li><strong>Property </strong><code><strong>protected static $modules</strong></code>: Lists the modules that need to be enabled during the test. It includes <code>'system'</code>, <code>'user'</code>, and your <code>'example_module'</code>.</li><li><strong>Method </strong><code><strong>testModuleIsEnabled</strong></code>: Checks that your custom module is enabled.</li><li><strong>Method </strong><code><strong>testCreateUser</strong></code>: Creates a user, saves it, reloads it, and verifies that the data matches the expected values.</li></ul><h4 class="ql-heading" data-block-id="block-43f888b3-aba2-4490-abd3-e72602cf0c79">Important Notes</h4><ul><li><strong>Service Container</strong>: We use <code>$this-&gt;container</code> to access Drupal services like <code>entity_type.manager</code>.</li><li><strong>Assertions</strong>: Methods like <code>assertTrue</code> and <code>assertEquals</code> check specific conditions to determine if the test passes or fails.</li><li><strong>Cleanup</strong>: In more complex tests, you might need to clean up created data. In this case, the database resets between tests, so it's unnecessary.</li></ul><h4 class="ql-heading" data-block-id="block-483d9ae2-dd8c-473a-acc2-90869d8dc1bc">What Does This Test Do?</h4><p>The test performs the following:</p><ol><li><strong>Verifies that the module is enabled</strong>: Ensures that <code>example_module</code> is active in the test environment.</li><li><strong>Creates and Verifies a User</strong>:<ul><li>Creates a new user with specific username and email.</li><li>Saves the user to the database.</li><li>Loads the user from the database.</li><li>Checks that the loaded username and email match the ones provided.</li></ul></li></ol><p>This simple example covers key aspects:</p><ul><li>Interaction with Drupal's entity system.</li><li>Use of the service container.</li><li>Making assertions to validate expected behavior.</li></ul><h4 class="ql-heading" data-block-id="block-8be7f132-73d3-449e-b1b2-67b86762e96a">Conclusion</h4><p>Kernel tests are a powerful tool to ensure your custom modules function correctly within the Drupal ecosystem. By integrating them into your development workflow, you can efficiently detect and resolve integration issues, enhancing the quality and stability of your project.</p>
      
      
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
              <a href="https://brightplum.com/taxonomy/term/2" hreflang="en">Drupal Modules</a>
          
  ]]></description>
  <pubDate>Wed, 08 Jan 2025 17:22:15 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">24 at https://brightplum.com</guid>
    </item>
<item>
  <title>Providing Technical Guidance</title>
  <link>https://brightplum.com/blog/providing-technical-guidance</link>
  <description><![CDATA[<span>Providing Technical Guidance</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 07/30/2024 - 22:26
</span>

            <h3>Bug</h3><p>Clear explanation of what is being reported.</p><p>&nbsp;</p><h3>Steps to reproduce:</h3><ul><li>Clear steps on how to reproduce the issue reported</li></ul><p>&nbsp;</p><h3>Technical</h3><ul><li>Step by step, very clear instructions from start to finish<ul><li>Breakdown into checklist/bullets for easier reading</li></ul></li><li>Ideas on possible issues or blockers</li><li>Should include steps to test</li><li>Should include any applicable links or docs</li><li>Should include images/screenshots where needed or where it would be helpful</li></ul><p>&nbsp;</p><h3><strong>Template for Creating the Ticket</strong></h3><h4><strong>1. Task Description:</strong></h4><ul><li><strong>Objective</strong>: Briefly describe what this task aims to achieve.</li><li><strong>Problem to Solve</strong>: Detail the specific problem that this task addresses.</li></ul><h4><strong>2. Steps to reproduce:</strong></h4><ul><li>Clear steps on how to reproduce the issue reported.</li><li>Add screenshots or a video if possible.</li></ul><h4><strong>3. Technical Planning:</strong></h4><ul><li><strong>List of Errors:</strong> If applicable, list known errors that this task intends to correct.</li><li><strong>Proposed Technical Solution</strong>:<ul><li><strong>Answer to Question 1:</strong> "Is this plan the correct approach to the problem?" Describe how your plan specifically addresses the mentioned problem. Include any technical, methodological, or strategic considerations that justify why this approach is suitable.</li></ul></li></ul><h4><strong>4. Acceptance Criteria:</strong></h4><ul><li>Detail what will be considered a successful outcome of this task. Describe the specific criteria that must be met for the work to be deemed satisfactorily completed.</li></ul><p>&nbsp;</p><h3><strong>Template for Completing the Ticket</strong></h3><p><strong>Demo</strong>:</p><ul><li>Provide a screenshot, a link to a short video, or both, demonstrating what was accomplished.</li></ul><p><strong>Steps to test the solution:</strong></p><ul><li>Detail the necessary steps to test the implemented solution, including specific commands, necessary database configurations, and any other relevant steps.</li><li>Answer to Question 2: "Did I execute the technical plan of this task correctly?" Here, describe how the steps taken and the results of the demonstration validate the correct execution of the plan.</li></ul><p><strong>Notes:</strong></p><ul><li>Include any important points or key considerations of the solution</li></ul><p><strong>PR</strong>:</p><ul><li>Provide the direct link to the GitLab Pull Request where the code can be reviewed and possibly merged.</li></ul><p>&nbsp;</p><h3>Template for Unapproved or Returned Tickets</h3><p><strong>Feedback:</strong></p><ul><li><strong>Reason for Return:</strong> Brief reason for non-approval or return, e.g., "Solution fails acceptance criteria."</li></ul><p><strong>Details:</strong></p><ul><li><strong>Issues Identified:</strong> List key issues If possible, provide screenshots and videos.</li><li><strong>Improvement Suggestions:</strong> Brief suggestions for resolution.</li></ul><p><strong>Next Steps:</strong></p><ul><li><strong>Action Plan:</strong> Outline required actions and responsible parties.</li><li><strong>Follow-up:</strong> Mention scheduled re-evaluation.</li></ul>
      
      
              <a href="https://brightplum.com/taxonomy/term/5" hreflang="en">Developer Processes</a>
          
  ]]></description>
  <pubDate>Wed, 31 Jul 2024 03:26:31 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">23 at https://brightplum.com</guid>
    </item>
<item>
  <title>How to implement dynamic underscore in JS, for Drupal solutions</title>
  <link>https://brightplum.com/blog/how-implement-dynamic-underscore-js-drupal-solutions</link>
  <description><![CDATA[<span>How to implement dynamic underscore in JS, for Drupal solutions</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 07/30/2024 - 22:14
</span>

            <h3>Introduction</h3><p>In this article, we will discuss how to implement dynamic underlining in JavaScript for Drupal solutions. Through this method, we can highlight specific words or phrases within a paragraph element (p). This technique can be useful in cases such as highlighting search terms, emphasizing keywords in a text, or highlighting certain words based on specific conditions.</p><p>The idea of using this is in cases where custom modules are not very flexible, we can add this little JS, and apply our solution based on our specific needs.</p><p>&nbsp;</p><h3>Example Code</h3><p>JS: &nbsp; &nbsp; &nbsp;</p><pre><code class="language-plaintext">// Click event for elements with the 'high-word' class      
container.addEventListener("click", (event) =&gt; {        
	if (event.target.classList.contains("high-word")) {          
		removeHighWord();        
	}      
}); 

// Escape special characters in a string for use in a regular expression      
const escapeRegExp = (string) =&gt; {        
	return string.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&amp;");      
}; 
     
// Remove HTML tags from a string      
const removeAllTags = (string) =&gt; {        
	return string.replace(/&lt;\/?[^&gt;]+(&gt;|$)/g, "");      
};
      
// Check if the matched text is inside an HTML tag      
const isInsideTag = (text, index) =&gt; {        
	const openingTag = text.slice(0, index).lastIndexOf("&lt;");        
	const closingTag = text.slice(0, index).lastIndexOf("&gt;");        
	return openingTag &gt; closingTag;      
};
      
// Highlight a word or phrase within a paragraph element (p)      
const highlightWordInP = (p, word) =&gt; {        
	if (p) {          
		const escapedWord = escapeRegExp(word);          
		const cleanWord = removeAllTags(escapedWord);          
		const wordParts = cleanWord.split(/\s+/);          
		const regexPattern = wordParts            
		.map((part) =&gt; `(${part})`)            
		.join("(?:&lt;[^&gt;]*&gt;|&amp;[^;]*;|\\W)*");          
		const regex = new RegExp(regexPattern, "gi");          
		let text = p.innerHTML;          
		let highlightedText = text.replace(regex, (match, ...args) =&gt; {            
			const index = args[args.length - 2];            
			if (isInsideTag(text, index)) {             
				// Match is inside a tag, don't highlight it              
				return match;            
			} else {              
				return match                
				.split(/\s+/)                
				.map((part) =&gt; `&lt;span class='high-word'&gt;${part}&lt;/span&gt;`)                
				.join(" ");            
			}          
		});          
		p.innerHTML = highlightedText;        
	}      
};
      
// This function removes the &lt;span&gt; element but keeps its content      
const removeHighWord = () =&gt; {        
	const highlightedElements =          
	document.getElementsByClassName("high-word");        
	[...highlightedElements].forEach((el) =&gt; {          
		const parent = el.parentNode;          
		const textNode = document.createTextNode(el.textContent);          
		parent.replaceChild(textNode, el);        
	});      
};</code></pre><p>Css:</p><pre><code class="language-plaintext">.high-word {  
	background-color: rgba(0, 255, 0, 0.5);  cursor: pointer;
}</code></pre><h3>&nbsp;</h3><h3>Explanation</h3><p>The code introduces a function called `highlightWordInP`, which accepts two arguments: a paragraph element `p` (but you can also pass it a div that has a set of text tags) and a `word` to be highlighted. The function does the following:</p><p>&nbsp;</p><ol><li>Escapes special characters in the word using the `escapeRegExp` function.</li><li>Removes HTML tags from the word using the `removeAllTags` function.</li><li>Splits the word into parts and creates a regular expression that matches the word, ignoring HTML tags, HTML entities, and non-alphabetic characters between the word parts.</li><li>Replaces matches of the word in the paragraph's innerHTML with a `&lt;span&gt;` element containing a specific CSS class for underlining.</li></ol><p>&nbsp;</p><h3>Use Cases</h3><p>You can use this dynamic underlining technique in various scenarios, such as:</p><p>- Highlighting search terms within search results.</p><p>- Emphasizing important keywords within a text.</p><p>- Creating a visual cue for specific words or phrases based on user interaction or other conditions.</p><p>To use the <code>highlightWordInP</code></p><p>The difference, and for which I like this code, is that it recognizes between labels.</p><p>All the solutions that I found, to apply to a custom element of a form or a preview, do not adapt to what I needed here, since it was something very custom.</p><p>By using a class, we can control underlining, bold among other values.</p><p>The most common problem that happened was:</p><p><code>&lt;p&gt;&lt;b&gt;This text&lt;/b&gt; has different tags&lt;/p&gt;</code></p><p>The conventional underscores were lost or they did it wrong when underlining this content, since when searching for matches it generated problems because the contents were between tags, for example when passing a text like "This text has different labels", it did not find the matches Due to the different tags, it worked as long as the contents were in the same tag, not separated between paragraphs or other possible elements, which the method shown in this article solves. function, simply pass the paragraph element and the word to be highlighted as arguments. The function will then apply the highlighting as specified.</p>
      
      
              <a href="https://brightplum.com/taxonomy/term/5" hreflang="en">Developer Processes</a>
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
          
  ]]></description>
  <pubDate>Wed, 31 Jul 2024 03:14:30 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">22 at https://brightplum.com</guid>
    </item>
<item>
  <title>How to Implement Event Subscriber</title>
  <link>https://brightplum.com/blog/how-implement-event-subscriber</link>
  <description><![CDATA[<span>How to Implement Event Subscriber</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 07/30/2024 - 22:01
</span>

            <h3>Introduction</h3><p>In this document, we will discuss how to implement an event subscriber in Drupal 9. We will provide a basic code example, explain its purpose, and discuss the possibilities of what can be achieved using event subscribers in Drupal.</p><p>&nbsp;</p><h3>What is an Event Subscriber?</h3><p>Event subscribers in Drupal are a way to extend and modify the behavior of your application by listening to specific events dispatched by the system. They are part of the Symfony Event Dispatcher component, which is integrated into Drupal. By subscribing to events, you can react to changes in the system, perform additional actions, or modify the default behavior of certain operations.</p><p>&nbsp;</p><h3>Example of an Event Subscriber</h3><pre><code class="language-plaintext">&lt;?php
 namespace Drupal\anyModule\EventSubscriber; use Drupal\Core\Session\AccountProxy;
 use Drupal\core_event_dispatcher\Event\Form\FormIdAlterEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\core_event_dispatcher\Event\Entity\EntityPresaveEvent;
 use Drupal\hook_event_dispatcher\HookEventDispatcherInterface; 
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityInterface; 
 use Drupal\Core\Database\Connection; use Drupal\Core\Cache\Cache;
 use Drupal\Core\File\FileSystem;
 
/**
 * Any module Customization for event subscriber.
 */
class eventSubscriber implements EventSubscriberInterface {  
/**   
* Current user service.   
*   
* @var \Drupal\Core\Session\AccountProxy   
*/  protected $currentUser;  
/**   
* The entity manager.   
*   
* @var \Drupal\Core\Entity\EntityTypeManager   
*/  protected $entityTypeManager;  
/**   
* The database connection.   
*   
* @var \Drupal\Core\Database\Connection   
*/  
protected $connection;  
/**   
* The file system.   
*   
* @var \Drupal\Core\File\FileSystem   
*/  protected $fileSystem;  
/**   
* {@inheritdoc}   
*/  
public function __construct(AccountProxy $current_user, EntityTypeManager $entity_type_manager, Connection $connection, FileSystem $file_system) {    
	// Reference the current_user service.    
	$this-&gt;currentUser = $current_user;    
	$this-&gt;entityTypeManager = $entity_type_manager;    
	$this-&gt;connection = $connection;    
	$this-&gt;fileSystem = $file_system;  
}  
/**   
* {@inheritdoc}   
*/  
public static function getSubscribedEvents() {    
	return [      
		'hook_event_dispatcher.form_node_form.alter' =&gt; 'alterMclNodeForm',      
		'hook_event_dispatcher.form_node_form.alter' =&gt; 'alterMclNodeForm',    
	];  
}  
/**   
* Alter node form.   
*   
* @param \Drupal\core_event_dispatcher\Event\Form\FormIdAlterEvent $event   
*   The event.   
*/  
public function alterMclNodeForm(FormIdAlterEvent $event): void {    
	$form = &amp;$event-&gt;getForm();    
	// This is a example: In a form you need to hide buttons for some reason or        
	//similar things, which cannot be done from the display form of the content type,    
	//we can do it from here:    
	$this-&gt;hiddenRemoveButtonOfMediaEntityTable($form); 
	// This method is example.  
}
}</code></pre><p>&nbsp;</p><p>This would be the event subscriber, but take into account that this should ideally go inside a custom module that you have created for our specific need, the event subscriber by itself does not work, we must invoke it, and this is done in the services file .yml</p><p>&nbsp;</p><p>Something like this:</p><pre><code class="language-plaintext">services:  
anyModule.event_subscriber:    
class: Drupal\anyModule\EventSubscriber\EventSubscriber    
arguments:      
- "@current_user"      
- "@entity_type.manager"      
- "@database"      
- "@file_system"    
tags:      
- { name: event_subscriber }</code></pre><p>&nbsp;</p><p>With this it should work, it is important to remember that we must clean the cache and activate our custom module, something like this:</p><ul><li>ddev drush on anyModule ( If you use lando is the same, "lando drush on anyModule")</li><li>ddev drush cr ( If you use lando is the same, "lando drush cr")</li></ul><p>&nbsp;</p><p>Code from a site project that implements this functionality:</p><p><a href="https://gitlab.com/brightplum/njcourts-gov/-/blob/development/docroot/modules/custom/njcourts_opinions/src/EventSubscriber/NjcourtsOpinionsSubscriber.php">https://gitlab.com/brightplum/njcourts-gov/-/blob/development/docroot/modules/custom/njcourts_opinions/src/EventSubscriber/NjcourtsOpinionsSubscriber.php</a></p><h3>&nbsp;</h3><h3>Use Cases and Possibilities</h3><p>Event subscribers can be used for a wide variety of purposes in Drupal, including:</p><ul><li>Altering the forms</li><li>Altering nodes.</li><li>Responding to user authentication events</li><li>etc,...</li></ul><p>By using event subscribers, you can extend and customize your Drupal application to fit your specific needs, and react to various events happening throughout the system.</p><p>Here examples of original page of hook event dispatcher: <a href="https://github.com/pdenooijer/hook_event_dispatcher">https://github.com/pdenooijer/hook_event_dispatcher</a></p><h2>&nbsp;</h2><h2>Conclusion</h2><p>The interesting thing about using this approach, instead of simply applying an alter hook or any hook in a .module, is how neat and simplified the code looks, since you can tidy up your code with the object-oriented programming structure and apply dependency injection and with it, call multiple services and everything will be easier to understand and it will look much better, for large projects, I think this is a very cool alternative that is worth trying.</p>
      
      
              <a href="https://brightplum.com/taxonomy/term/5" hreflang="en">Developer Processes</a>
          
  ]]></description>
  <pubDate>Wed, 31 Jul 2024 03:01:32 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">21 at https://brightplum.com</guid>
    </item>
<item>
  <title>How to integrate Phpcs with Drupal code standards on bitbucket pipelines</title>
  <link>https://brightplum.com/blog/how-integrate-phpcs-drupal-code-standards-bitbucket-pipelines</link>
  <description><![CDATA[<span>How to integrate Phpcs with Drupal code standards on bitbucket pipelines</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 07/30/2024 - 21:37
</span>

            <h2>Steps:</h2><p>Create a new pipeline in the root of the project with the file name <code>bitbucket-pipelines.yml</code> or if it exists add just the step and the trigger to the existed pipeline.</p><pre><code class="language-plaintext"># These are yaml anchors, reused later
x-bash-env-steps:  
- &amp;bash_env_export export BASH_ENV="$BITBUCKET_CLONE_DIR/.bashrc"  
- &amp;bash_env_source source $BASH_ENV
# This is a larger yaml anchor, reused for each pipeline
pull_requests: &amp;pull_requests  
- step:      
name: 'PHPCS'      
image: wodby/drupal-php:7.4      
script:        
- composer install        
- ./vendor/bin/phpcs -q --colors --standard=Drupal --extensions=php,module,inc,install,test,profile,theme ./web/modules/custom
- ./vendor/bin/phpcs -q --colors --standard=DrupalPractice --extensions=php,module,inc,install,test,profile,theme ./web/modules/custom        
- ./vendor/bin/phpcs -q --colors --standard=Drupal --extensions=php,module,inc,install,test,profile,theme --report=diff ./web/modules/custom        
- ./vendor/bin/phpcs -q --colors --standard=DrupalPractice --extensions=php,module,inc,install,test,profile,theme --report=diff ./web/modules/custom        
- ./vendor/bin/phpcs -q --colors --standard=Drupal --extensions=php,module,inc,install,test,profile,theme ./web/themes/custom  
- ./vendor/bin/phpcs -q --colors --standard=DrupalPractice --extensions=php,module,inc,install,test,profile,theme ./web/themes/custom        
- ./vendor/bin/phpcs -q --colors --standard=Drupal --extensions=php,module,inc,install,test,profile,theme --report=diff ./web/themes/custom        
- ./vendor/bin/phpcs -q --colors --standard=DrupalPractice --extensions=php,module,inc,install,test,profile,theme --report=diff ./web/themes/custom
options:  
max-time: 30
pipelines:  
pull-requests:    
# Using the custom pull_request pipeline on each pull request created.    
'**': *pull_requests
</code></pre>
      
      
              <a href="https://brightplum.com/taxonomy/term/3" hreflang="en">Bitbucket</a>
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
          
  ]]></description>
  <pubDate>Wed, 31 Jul 2024 02:37:45 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">20 at https://brightplum.com</guid>
    </item>
<item>
  <title>American Hospital Association</title>
  <link>https://brightplum.com/case-studies/american-hospital-association</link>
  <description><![CDATA[<span>American Hospital Association</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Tue, 07/23/2024 - 18:25
</span>

            <h3>Case Study: Revamping Client's Website for Enhanced User Experience and Content Management</h3><h4>&nbsp;</h4><h4>The Problem</h4><p dir="ltr">The client faced several critical challenges with their site:</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; &nbsp;Content Management</strong>: They were unable to pin important news articles on the homepage or filter news by year on the news page. This made it difficult to highlight relevant content and efficiently organize information.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; &nbsp;User Experience</strong>: Existing members were incorrectly presented with the "Become a Member" message instead of the "Renew Membership" option, causing confusion and diminishing the user experience.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; &nbsp;Content Editing</strong>: The site’s text editor (CKEditor) posed significant difficulties for the client in adjusting and formatting images, limiting their flexibility and the visual presentation of content.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; &nbsp;Data Export</strong>: The client needed the capability to export information from the People page in CSV format, a feature that was previously unavailable.</p><p>&nbsp;</p><p>&nbsp;</p><h4>How We Solved It and Key Victories</h4><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; &nbsp;News Article Management</strong>: We introduced a new field that allows news articles to be pinned on the homepage. Additionally, a sidebar with a year filter was created on the news page. Editors can now highlight important news on the homepage, while users can filter news by year, greatly improving content organization and accessibility.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; Membership Messaging</strong>: A custom module was developed to display tailored messages based on the user's role (anonymous or member). Members now see the appropriate "Renew Membership" message, enhancing clarity and site navigation.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; Enhanced Content Editing</strong>: New image formatting options were integrated into CKEditor. Users can now adjust the size, alignment, and shape of images, significantly improving flexibility and visual presentation. This enhancement allows for round images and better integration of images with content.</p><p dir="ltr"><strong>&nbsp; &nbsp; &nbsp; Data Export Capability</strong>: A custom view was created to enable CSV data export from the People page. This feature empowers administrators to easily export the data they need, facilitating the management and analysis of information.</p><p dir="ltr">These improvements collectively resolved the client's critical challenges, enhancing the overall user experience, improving content management and presentation, and providing valuable administrative tools.</p>
      
            <p dir="ltr">&nbsp; &nbsp; &nbsp; &nbsp;The American Hospital Association (AHA) Coding Clinic Advisors provide guidance on coding practices and conventions. They are experts who assist healthcare professionals in accurately coding medical diagnoses and procedures based on the International Classification of Diseases (ICD) and Current Procedural Terminology (CPT) coding systems.</p><p dir="ltr">&nbsp;</p><p dir="ltr">&nbsp; &nbsp; &nbsp; &nbsp;The Coding Clinic, published by the AHA, is a resource that offers official coding advice, guidelines, and updates on coding changes. It helps ensure consistent and accurate coding, which is crucial for proper documentation, billing, and reimbursement in the healthcare industry. The advisors contribute to the development of the Coding Clinic content, respond to inquiries from coding professionals, and help interpret coding rules and regulations.</p><p dir="ltr"><br>Learn more about AHA Coding Clinic Advisor here: <a href="https://www.codingclinicadvisor.com/">https://www.codingclinicadvisor.com/</a></p>
      
  
    Key elements
              <ul><li>Website redesign</li><li>New custom features</li></ul>
          
]]></description>
  <pubDate>Tue, 23 Jul 2024 23:25:18 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">15 at https://brightplum.com</guid>
    </item>
<item>
  <title>How to Config Split</title>
  <link>https://brightplum.com/blog/how-config-split</link>
  <description><![CDATA[<span>How to Config Split</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Wed, 05/08/2024 - 13:45
</span>

            <p><strong>A quick summary of when we need config split:</strong></p><blockquote><p>Config split module is useful when we need some modules for development or testing but we don't want them in live (or any other environment), with this module we are allow to configure sub config folders that will be loaded just when we allow them to be loaded in the settings.php.</p></blockquote><h3>Basic config steps</h3><ul><li>Install the latest config split version for the Drupal version you have, can be found here:</li><li><a href="https://www.drupal.org/project/config_split">https://www.drupal.org/project/config_split</a></li><li>Enable the module with <code>drush en config_split</code></li><li>Go to module config with this route <code>/admin/config/development/configuration/config-split</code> this route may change but you can always go to the extend page and search the module, in there you'll see the configuration link.</li><li>On the config split configuration page you'll see a page with all the configured splits, in our case that its a newly install module we won't have any. If we click on "Add Configuration Split setting" button we'll get the configuration for a new config split.&nbsp;</li><li>In there we can fill the following fields:<ul><li>Label: Put a descriptive label so you don't get confuse on what its in that split.</li><li>Description: Write a quick description of what will be store in that config split</li><li>Storage: We have 3 options here <strong>Folder, Collection, Database, </strong>we don't need to change the default that is folder unless we need a very specific config that requires the others.</li><li>Folder: Where the config split will be saved, try to save it under a folder with a similar name as the label.</li><li>Status: This control whenever a split will load or not, by default true but with this we can do the magic in settings.php to conditionally load the splits.</li><li>Complete split: This let us remove an entire config from the default config and put it in our split.</li><li>Partial split: Let us add a patch to add/remove config after the default config ran (for example core.extension let us enable/disable modules).</li></ul></li><li>Once we fill the needed fields we can save that split.</li><li>Now if we run <code>drush cex</code> to get the config split out.</li><li><p>Then if we want to load this split conditionally we can add this code to the settings.php:</p><pre><code class="language-plaintext">if ([ContitionsToNotLoad]) {  
	$config['config_split.config_split.test']['status'] = FALSE; 
}</code></pre></li></ul>
      
      
              <a href="https://brightplum.com/taxonomy/term/2" hreflang="en">Drupal Modules</a>
          
  ]]></description>
  <pubDate>Wed, 08 May 2024 18:45:57 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">12 at https://brightplum.com</guid>
    </item>
<item>
  <title>How to Implement Automatization Deployment Gitlab to Pantheon</title>
  <link>https://brightplum.com/blog/how-implement-automatization-deployment-gitlab-pantheon</link>
  <description><![CDATA[<span>How to Implement Automatization Deployment Gitlab to Pantheon</span>

            
  
  
  
    Image
                



          



      <span><span>admin</span></span>
<span>Wed, 05/08/2024 - 13:44
</span>

            <p>To start creating an automatization between Gitlab and Pantheon we need to following some steps.</p><ol><li><p>Create a file and script to make the magic and pushing everything to Pantheon from Gitlab.</p><p>Basic Script:</p><pre><code class="language-plaintext">stages:  
- deploy before_script:  
# See https://docs.gitlab.com/ee/ci/ssh_keys/README.html  
- eval $(ssh-agent -s)  
- echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - &gt; /dev/null  - mkdir -p $HOME/.ssh &amp;&amp; echo "StrictHostKeyChecking no" &gt;&gt; "$HOME/.ssh/config"  
- git config --global user.email "$GITLAB_USER_EMAIL"  
- git config --global user.name "Gitlab CI"
deploy:dev:  
stage: deploy  
environment:    
name: dev    
url: https://dev-$PANTHEON_SITE.pantheonsite.io/  
script:    
- git config checkout.defaultRemote origin    
- git remote add pantheon $PANTHEON_GIT_URL    
- git fetch pantheon    
- git branch -v    
- git checkout master    
- git push pantheon master --force  
only:    
- master</code></pre><p>Gitlab by default use "<code>.gitlab-ci.yml</code>" as a name for the file</p></li><li>Get this code and create a new file with the name <code>.gitlab-ci.yml</code> in your project root.</li><li>Commit and push this file to the repository project in Gitlab on the master branch.</li><li>Once you have this file in the Gitlab repository, let's configure some variables used on the script. For example <code>$PANTHEON_GIT_URL</code> and <code>$PANTHEON_SITE</code></li><li>To configure these variables we need to go to Gitlab Project page then in the left sidebar menu there is the a <code>Settings</code> option. Click on this menu item and then click on <code>CI/CD </code>submenu item.&nbsp;</li><li>Then go to that page and go to the <code>Variables</code> section</li><li>Now create the variables that you used on the script. In this case we used <code>$PANTHEON_GIT_URL</code> and <code>$PANTHEON_SITE </code>so now we need to set a value for them.</li><li>For <code>$PANTHEON_GIT_URL. </code>Go to Pantheon and copy the git url and page on value field.&nbsp;</li><li>For <code>$PANTHEON_SITE </code>it is the name of the site.&nbsp;</li><li>Click on update variable and then we can start to pushing things automatically on pantheon.</li><li>Check in the left sidebar the CI/CD menu item all deployments and check the jobs.&nbsp;</li></ol><p>&nbsp;</p>
      
      
              <a href="https://brightplum.com/taxonomy/term/1" hreflang="en">Drupal 10</a>
              <a href="https://brightplum.com/taxonomy/term/4" hreflang="en">Pantheon</a>
          
  ]]></description>
  <pubDate>Wed, 08 May 2024 18:44:10 +0000</pubDate>
    <dc:creator>admin</dc:creator>
    <guid isPermaLink="false">11 at https://brightplum.com</guid>
    </item>

  </channel>
</rss>
